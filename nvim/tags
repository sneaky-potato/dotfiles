!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Vim	C,constant	/constant definitions/
!_TAG_KIND_DESCRIPTION!Vim	a,augroup	/autocommand groups/
!_TAG_KIND_DESCRIPTION!Vim	c,command	/user-defined commands/
!_TAG_KIND_DESCRIPTION!Vim	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!Vim	m,map	/maps/
!_TAG_KIND_DESCRIPTION!Vim	n,filename	/vimball filename/
!_TAG_KIND_DESCRIPTION!Vim	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Vim	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/shawn/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
BackupAge	lua/elmon/plugins/devlife.vim	/^function! BackupAge( factor )$/;"	f
BackupTooOld	lua/elmon/plugins/devlife.vim	/^function! BackupTooOld()$/;"	f
CalcScore	lua/elmon/plugins/devlife.vim	/^function! CalcScore()$/;"	f
ChangeStat	lua/elmon/plugins/devlife.vim	/^function! ChangeStat( stat, step )$/;"	f
Choose	lua/elmon/plugins/devlife.vim	/^function! Choose(n) " 0 n within$/;"	f
CodeLostDestiny	lua/elmon/plugins/devlife.vim	/^function! CodeLostDestiny()$/;"	f
CodeLostEvent	lua/elmon/plugins/devlife.vim	/^function! CodeLostEvent()$/;"	f
CommandValid	lua/elmon/plugins/devlife.vim	/^function! CommandValid( commandChar )$/;"	f
CompanyNameGenerator	lua/elmon/plugins/devlife.vim	/^function! CompanyNameGenerator()$/;"	f
ConfirmQuit	lua/elmon/plugins/devlife.vim	/^function! ConfirmQuit()$/;"	f
CreateBackup	lua/elmon/plugins/devlife.vim	/^function! CreateBackup()$/;"	f
DoWork	lua/elmon/plugins/devlife.vim	/^function! DoWork()$/;"	f
GameInit	lua/elmon/plugins/devlife.vim	/^function! GameInit()$/;"	f
GameStarted	lua/elmon/plugins/devlife.vim	/^function! GameStarted()$/;"	f
GetBackupCreatedMessage	lua/elmon/plugins/devlife.vim	/^function! GetBackupCreatedMessage()$/;"	f
GetBackupNoMessage	lua/elmon/plugins/devlife.vim	/^function! GetBackupNoMessage()$/;"	f
GetBackupRestoredMessage	lua/elmon/plugins/devlife.vim	/^function! GetBackupRestoredMessage()$/;"	f
GetCodeLostReason	lua/elmon/plugins/devlife.vim	/^function! GetCodeLostReason()$/;"	f
GetFunMessage	lua/elmon/plugins/devlife.vim	/^function! GetFunMessage()$/;"	f
GetLazyMessage	lua/elmon/plugins/devlife.vim	/^function! GetLazyMessage()$/;"	f
GetManagerHappyMessage	lua/elmon/plugins/devlife.vim	/^function! GetManagerHappyMessage()$/;"	f
GetRandomMessage	lua/elmon/plugins/devlife.vim	/^function! GetRandomMessage( array )$/;"	f
GetWorkMessage	lua/elmon/plugins/devlife.vim	/^function! GetWorkMessage()$/;"	f
GetWorkaholicMessage	lua/elmon/plugins/devlife.vim	/^function! GetWorkaholicMessage()$/;"	f
GotFired	lua/elmon/plugins/devlife.vim	/^function! GotFired()$/;"	f
GotLazy	lua/elmon/plugins/devlife.vim	/^function! GotLazy()$/;"	f
GotWorkaholic	lua/elmon/plugins/devlife.vim	/^function! GotWorkaholic()$/;"	f
HaveFun	lua/elmon/plugins/devlife.vim	/^function! HaveFun()$/;"	f
LevelUp	lua/elmon/plugins/devlife.vim	/^function! LevelUp()$/;"	f
LoadGame	lua/elmon/plugins/devlife.vim	/^function! LoadGame()$/;"	f
LuaSnip	lazy-lock.json	/^  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },$/;"	o
Main	lua/elmon/plugins/devlife.vim	/^function! Main()$/;"	f
OkToPrint	lua/elmon/plugins/devlife.vim	/^function! OkToPrint()$/;"	f
PrintGameStatus	lua/elmon/plugins/devlife.vim	/^function! PrintGameStatus()$/;"	f
PrintMgrHappyMessage	lua/elmon/plugins/devlife.vim	/^function! PrintMgrHappyMessage()$/;"	f
PrintPlayer	lua/elmon/plugins/devlife.vim	/^function! PrintPlayer()$/;"	f
PrintWelcomeMessage	lua/elmon/plugins/devlife.vim	/^function! PrintWelcomeMessage()$/;"	f
PumpFunGauge	lua/elmon/plugins/devlife.vim	/^function! PumpFunGauge()$/;"	f
PumpWorkGauge	lua/elmon/plugins/devlife.vim	/^function! PumpWorkGauge()$/;"	f
Random	lua/elmon/plugins/devlife.vim	/^function! Random()$/;"	f
ReleaseFunGauge	lua/elmon/plugins/devlife.vim	/^function! ReleaseFunGauge()$/;"	f
ReleaseWorkGauge	lua/elmon/plugins/devlife.vim	/^function! ReleaseWorkGauge()$/;"	f
RestoreBackup	lua/elmon/plugins/devlife.vim	/^function! RestoreBackup()$/;"	f
RunDevLife	lua/elmon/plugins/devlife.vim	/^function! RunDevLife()$/;"	f
SaveGame	lua/elmon/plugins/devlife.vim	/^function! SaveGame()$/;"	f
ShowBossScreen	lua/elmon/plugins/devlife.vim	/^function! ShowBossScreen()$/;"	f
ShowHelp	lua/elmon/plugins/devlife.vim	/^function! ShowHelp()$/;"	f
ShowHighscores	lua/elmon/plugins/devlife.vim	/^function! ShowHighscores()$/;"	f
ShowIntro	lua/elmon/plugins/devlife.vim	/^function! ShowIntro()$/;"	f
StartNewGame	lua/elmon/plugins/devlife.vim	/^function! StartNewGame()$/;"	f
TooMuchFun	lua/elmon/plugins/devlife.vim	/^function! TooMuchFun()$/;"	f
TooMuchWork	lua/elmon/plugins/devlife.vim	/^function! TooMuchWork()$/;"	f
Vim Tricks	tricks.md	/^# Vim Tricks$/;"	c
branch	lazy-lock.json	/^  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },$/;"	s	object:LuaSnip
branch	lazy-lock.json	/^  "catppuccin": { "branch": "main", "commit": "5215ea59df6d0a7e27da9a5cd1165e06d1b04cbe" },$/;"	s	object:catppuccin
branch	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	s	object:cmp-nvim-lsp
branch	lazy-lock.json	/^  "harpoon": { "branch": "harpoon2", "commit": "0378a6c428a0bed6a2781d459d7943843f374bce" },$/;"	s	object:harpoon
branch	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "24fa2a97085ca8a7220b5b078916f81e316036fd" },$/;"	s	object:lazy.nvim
branch	lazy-lock.json	/^  "lualine.nvim": { "branch": "master", "commit": "0a5a66803c7407767b799067986b4dc3036e1983" },$/;"	s	object:lualine.nvim
branch	lazy-lock.json	/^  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d05/;"	s	object:markdown-preview.nvim
branch	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "a4caa0d083aab56f6cd5acf2d42331b74614a58/;"	s	object:mason-lspconfig.nvim
branch	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "49ff59aded1047a773670651cfa40e76e63c6377" },$/;"	s	object:mason.nvim
branch	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "c15de7e7981f1111642e7e53799e1211d4606cb9" }/;"	s	object:nvim-autopairs
branch	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "5260e5e8ecadaf13e6b82cf867a909f54e15fd07" },$/;"	s	object:nvim-cmp
branch	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "b972e7154bc94ab4ecdbb38c8edbccac36f83996" }/;"	s	object:nvim-lspconfig
branch	lazy-lock.json	/^  "nvim-treesitter": { "branch": "master", "commit": "245da4eb2e52d14b034bbbedec9671e997ede764" /;"	s	object:nvim-treesitter
branch	lazy-lock.json	/^  "nvim-treesitter-textobjects": { "branch": "master", "commit": "3557e41418b4a6c5b85d5d64abe94c/;"	s	object:nvim-treesitter-textobjects
branch	lazy-lock.json	/^  "nvim-ts-autotag": { "branch": "main", "commit": "8ae54b90e36ef1fc5267214b30c2cbff71525fe4" },$/;"	s	object:nvim-ts-autotag
branch	lazy-lock.json	/^  "nvim-web-devicons": { "branch": "master", "commit": "b77921fdc44833c994fdb389d658ccbce5490c16/;"	s	object:nvim-web-devicons
branch	lazy-lock.json	/^  "plenary.nvim": { "branch": "master", "commit": "a3e3bc82a3f95c5ed0d7201546d5d2c19b20d683" },$/;"	s	object:plenary.nvim
branch	lazy-lock.json	/^  "telescope.nvim": { "branch": "0.1.x", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },$/;"	s	object:telescope.nvim
branch	lazy-lock.json	/^  "vim-be-good": { "branch": "master", "commit": "4fa57b7957715c91326fcead58c1fa898b9b3625" },$/;"	s	object:vim-be-good
branch	lazy-lock.json	/^  "vim-fugitive": { "branch": "master", "commit": "4f59455d2388e113bd510e85b310d15b9228ca0d" },$/;"	s	object:vim-fugitive
branch	lazy-lock.json	/^  "vim-wakatime": { "branch": "master", "commit": "3cb40867cb5a3120f9bef76eff88edc7f1dc1a23" },$/;"	s	object:vim-wakatime
branch	lazy-lock.json	/^  "which-key.nvim": { "branch": "main", "commit": "4433e5ec9a507e5097571ed55c02ea9658fb268a" }$/;"	s	object:which-key.nvim
build	lua/elmon/plugins/md.lua	/^        build = function() vim.fn["mkdp#util#install"]() end,$/;"	f
catppuccin	lazy-lock.json	/^  "catppuccin": { "branch": "main", "commit": "5215ea59df6d0a7e27da9a5cd1165e06d1b04cbe" },$/;"	o
cls	lua/elmon/plugins/devlife.vim	/^function! g:cls()$/;"	f
cmp-nvim-lsp	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	o
commit	lazy-lock.json	/^  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },$/;"	s	object:LuaSnip
commit	lazy-lock.json	/^  "catppuccin": { "branch": "main", "commit": "5215ea59df6d0a7e27da9a5cd1165e06d1b04cbe" },$/;"	s	object:catppuccin
commit	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	s	object:cmp-nvim-lsp
commit	lazy-lock.json	/^  "harpoon": { "branch": "harpoon2", "commit": "0378a6c428a0bed6a2781d459d7943843f374bce" },$/;"	s	object:harpoon
commit	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "24fa2a97085ca8a7220b5b078916f81e316036fd" },$/;"	s	object:lazy.nvim
commit	lazy-lock.json	/^  "lualine.nvim": { "branch": "master", "commit": "0a5a66803c7407767b799067986b4dc3036e1983" },$/;"	s	object:lualine.nvim
commit	lazy-lock.json	/^  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d05/;"	s	object:markdown-preview.nvim
commit	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "a4caa0d083aab56f6cd5acf2d42331b74614a58/;"	s	object:mason-lspconfig.nvim
commit	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "49ff59aded1047a773670651cfa40e76e63c6377" },$/;"	s	object:mason.nvim
commit	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "c15de7e7981f1111642e7e53799e1211d4606cb9" }/;"	s	object:nvim-autopairs
commit	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "5260e5e8ecadaf13e6b82cf867a909f54e15fd07" },$/;"	s	object:nvim-cmp
commit	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "b972e7154bc94ab4ecdbb38c8edbccac36f83996" }/;"	s	object:nvim-lspconfig
commit	lazy-lock.json	/^  "nvim-treesitter": { "branch": "master", "commit": "245da4eb2e52d14b034bbbedec9671e997ede764" /;"	s	object:nvim-treesitter
commit	lazy-lock.json	/^  "nvim-treesitter-textobjects": { "branch": "master", "commit": "3557e41418b4a6c5b85d5d64abe94c/;"	s	object:nvim-treesitter-textobjects
commit	lazy-lock.json	/^  "nvim-ts-autotag": { "branch": "main", "commit": "8ae54b90e36ef1fc5267214b30c2cbff71525fe4" },$/;"	s	object:nvim-ts-autotag
commit	lazy-lock.json	/^  "nvim-web-devicons": { "branch": "master", "commit": "b77921fdc44833c994fdb389d658ccbce5490c16/;"	s	object:nvim-web-devicons
commit	lazy-lock.json	/^  "plenary.nvim": { "branch": "master", "commit": "a3e3bc82a3f95c5ed0d7201546d5d2c19b20d683" },$/;"	s	object:plenary.nvim
commit	lazy-lock.json	/^  "telescope.nvim": { "branch": "0.1.x", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },$/;"	s	object:telescope.nvim
commit	lazy-lock.json	/^  "vim-be-good": { "branch": "master", "commit": "4fa57b7957715c91326fcead58c1fa898b9b3625" },$/;"	s	object:vim-be-good
commit	lazy-lock.json	/^  "vim-fugitive": { "branch": "master", "commit": "4f59455d2388e113bd510e85b310d15b9228ca0d" },$/;"	s	object:vim-fugitive
commit	lazy-lock.json	/^  "vim-wakatime": { "branch": "master", "commit": "3cb40867cb5a3120f9bef76eff88edc7f1dc1a23" },$/;"	s	object:vim-wakatime
commit	lazy-lock.json	/^  "which-key.nvim": { "branch": "main", "commit": "4433e5ec9a507e5097571ed55c02ea9658fb268a" }$/;"	s	object:which-key.nvim
config	lua/elmon/plugins/autopairs.lua	/^  config = function()$/;"	f
config	lua/elmon/plugins/colors.lua	/^        config = function()$/;"	f
config	lua/elmon/plugins/completion.lua	/^        config = function()$/;"	f
config	lua/elmon/plugins/harpoon.lua	/^        config = function()$/;"	f
config	lua/elmon/plugins/lsp-config.lua	/^        config = function()$/;"	f
config	lua/elmon/plugins/lualine.lua	/^  config = function()$/;"	f
config	lua/elmon/plugins/telescope.lua	/^  config = function()$/;"	f
config	lua/elmon/plugins/treesitter.lua	/^        config = function()$/;"	f
config	lua/elmon/plugins/vim-fugitive.lua	/^        config = function()$/;"	f
expand	lua/elmon/plugins/completion.lua	/^                    expand = function(args)$/;"	f
g:backupAge	lua/elmon/plugins/devlife.vim	/^        let g:backupAge += 1 | " Increase$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^        let g:backupAge -= a:factor | " Decrease$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^        let g:backupAge = 0 | " Reset$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^    let g:backupAge             = 0$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^    let g:backupAge             = str2nr( buf[ 10 ] )$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^    let g:backupAge         = 0$/;"	v
g:backupAge	lua/elmon/plugins/devlife.vim	/^let g:backupAge             = 0$/;"	v
g:backupTooOld	lua/elmon/plugins/devlife.vim	/^let g:backupTooOld          = 10$/;"	v
g:commandGlobalQuit	lua/elmon/plugins/devlife.vim	/^let g:commandGlobalQuit = 'Q'$/;"	v
g:devlife_is_loaded	lua/elmon/plugins/devlife.vim	/^let g:devlife_is_loaded = 1$/;"	v
g:emptyValue	lua/elmon/plugins/devlife.vim	/^let g:emptyValue = {$/;"	v
g:fext	lua/elmon/plugins/devlife.vim	/^let g:fext = {$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^        let g:funGauge = 0$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^    let g:funGauge              = 0$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^    let g:funGauge              = str2nr( buf[ 11 ] )$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^    let g:funGauge          = 0$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^    let g:funGauge += 1$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^    let g:funGauge -= 1$/;"	v
g:funGauge	lua/elmon/plugins/devlife.vim	/^let g:funGauge              = 0$/;"	v
g:funMax	lua/elmon/plugins/devlife.vim	/^let g:funMax                = 10$/;"	v
g:game	lua/elmon/plugins/devlife.vim	/^let g:game = {$/;"	v
g:msgBackupCreated	lua/elmon/plugins/devlife.vim	/^let g:msgBackupCreated = [$/;"	v
g:msgBackupNo	lua/elmon/plugins/devlife.vim	/^let g:msgBackupNo = [$/;"	v
g:msgBackupRestored	lua/elmon/plugins/devlife.vim	/^let g:msgBackupRestored = [$/;"	v
g:msgBossKey	lua/elmon/plugins/devlife.vim	/^let g:msgBossKey = [$/;"	v
g:msgCodeLostReasons	lua/elmon/plugins/devlife.vim	/^let g:msgCodeLostReasons = [$/;"	v
g:msgCompanyName1	lua/elmon/plugins/devlife.vim	/^let g:msgCompanyName1 = [$/;"	v
g:msgCompanyName2	lua/elmon/plugins/devlife.vim	/^let g:msgCompanyName2 = [$/;"	v
g:msgCompanyTitle	lua/elmon/plugins/devlife.vim	/^let g:msgCompanyTitle = [ 'Ltd.', 'Inc.', 'Corporation' ]$/;"	v
g:msgDoingWork	lua/elmon/plugins/devlife.vim	/^let g:msgDoingWork = [$/;"	v
g:msgGameStatus	lua/elmon/plugins/devlife.vim	/^let g:msgGameStatus = {$/;"	v
g:msgHappyMaxShown	lua/elmon/plugins/devlife.vim	/^            let g:msgHappyMaxShown = 1$/;"	v
g:msgHappyMaxShown	lua/elmon/plugins/devlife.vim	/^    let g:msgHappyMaxShown      = 0$/;"	v
g:msgHappyMaxShown	lua/elmon/plugins/devlife.vim	/^    let g:msgHappyMaxShown      = str2nr( buf[ 13 ] )$/;"	v
g:msgHappyMaxShown	lua/elmon/plugins/devlife.vim	/^    let g:msgHappyMaxShown  = 0$/;"	v
g:msgHappyMaxShown	lua/elmon/plugins/devlife.vim	/^let g:msgHappyMaxShown = 0$/;"	v
g:msgHavingFun	lua/elmon/plugins/devlife.vim	/^let g:msgHavingFun = [$/;"	v
g:msgIntro	lua/elmon/plugins/devlife.vim	/^let g:msgIntro = [$/;"	v
g:msgLazyPerson	lua/elmon/plugins/devlife.vim	/^let g:msgLazyPerson = [$/;"	v
g:msgManagerHappy	lua/elmon/plugins/devlife.vim	/^let g:msgManagerHappy = [$/;"	v
g:msgProgressDescription	lua/elmon/plugins/devlife.vim	/^let g:msgProgressDescription = [$/;"	v
g:msgWorkaholicPerson	lua/elmon/plugins/devlife.vim	/^let g:msgWorkaholicPerson = [$/;"	v
g:namesMaxLen	lua/elmon/plugins/devlife.vim	/^let g:namesMaxLen           = 20$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^                let g:player.title = msg$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^            let g:player.motivation -= 1$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.experience = 0$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.fun = 0$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.level += 1$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.mgrHappy = 0$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.motivation = 0$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.productivity = 0$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.status = g:status.gameSaved$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player.title = g:msgProgressDescription[ g:player.level ][ 0 ]$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player[ a:stat ] = g:statRange[ a:stat ][ 'max' ]$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^        let g:player[ a:stat ] = min$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player = {$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.company        = buf[ 6 ]$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.experience     = str2nr( buf[ 3 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.fun            = str2nr( buf[ 5 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.fun -= 5$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.level          = str2nr( buf[ 4 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.mgrHappy       = str2float( buf[ 8 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.mgrHappy -= 2.5$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.motivation     = str2nr( buf[ 1 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.motivation -= 20$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.name           = buf[ 0 ]$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.name = g:getString( '[NEW GAME] Please enter your name (Alowed: A-z0-9_): ', g:/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.productivity   = str2nr( buf[ 2 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.productivity -= 20$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.score          = str2nr( buf[ 7 ] )$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.score = g:player.fun + $/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.status         = g:status.gameSaved$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player.title          = buf[ 9 ]$/;"	v
g:player	lua/elmon/plugins/devlife.vim	/^    let g:player[ a:stat ] += thisStep$/;"	v
g:randomMessageFactor	lua/elmon/plugins/devlife.vim	/^let g:randomMessageFactor       = 3$/;"	v
g:randomMessageFactorRange	lua/elmon/plugins/devlife.vim	/^let g:randomMessageFactorRange  = 10$/;"	v
g:rnd	lua/elmon/plugins/devlife.vim	/^  let g:rnd = (g:rnd * 31421 + 6927) % 0x10000$/;"	v
g:savegamePath	lua/elmon/plugins/devlife.vim	/^let g:savegamePath = '\/home\/sneakypotato\/.devlife\/'$/;"	v
g:statRange	lua/elmon/plugins/devlife.vim	/^let g:statRange = {$/;"	v
g:statRelations	lua/elmon/plugins/devlife.vim	/^let g:statRelations = {$/;"	v
g:stats	lua/elmon/plugins/devlife.vim	/^let g:stats = {$/;"	v
g:status	lua/elmon/plugins/devlife.vim	/^let g:status = {$/;"	v
g:validCommands	lua/elmon/plugins/devlife.vim	/^let g:validCommands = {$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^        let g:workGauge = 0$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^    let g:workGauge             = 0$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^    let g:workGauge             = str2nr( buf[ 12 ] )$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^    let g:workGauge         = 0$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^    let g:workGauge += 1$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^    let g:workGauge -= 1$/;"	v
g:workGauge	lua/elmon/plugins/devlife.vim	/^let g:workGauge             = 0$/;"	v
g:workMax	lua/elmon/plugins/devlife.vim	/^let g:workMax               = 10$/;"	v
getMenuChoice	lua/elmon/plugins/devlife.vim	/^function! g:getMenuChoice( defaultChoice )$/;"	f
getString	lua/elmon/plugins/devlife.vim	/^function! g:getString( promptS, allowEmpty, valueDefault, maxLength )$/;"	f
harpoon	lazy-lock.json	/^  "harpoon": { "branch": "harpoon2", "commit": "0378a6c428a0bed6a2781d459d7943843f374bce" },$/;"	o
hr	lua/elmon/plugins/devlife.vim	/^function! g:hr()$/;"	f
init	lua/elmon/plugins/whichkey.lua	/^  init = function()$/;"	f
lazy.nvim	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "24fa2a97085ca8a7220b5b078916f81e316036fd" },$/;"	o
lualine.nvim	lazy-lock.json	/^  "lualine.nvim": { "branch": "master", "commit": "0a5a66803c7407767b799067986b4dc3036e1983" },$/;"	o
main	lua/elmon/snippets/skeleton.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
markdown-preview.nvim	lazy-lock.json	/^  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d05/;"	o
mason-lspconfig.nvim	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "a4caa0d083aab56f6cd5acf2d42331b74614a58/;"	o
mason.nvim	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "49ff59aded1047a773670651cfa40e76e63c6377" },$/;"	o
nvim-autopairs	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "c15de7e7981f1111642e7e53799e1211d4606cb9" }/;"	o
nvim-cmp	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "5260e5e8ecadaf13e6b82cf867a909f54e15fd07" },$/;"	o
nvim-lspconfig	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "b972e7154bc94ab4ecdbb38c8edbccac36f83996" }/;"	o
nvim-treesitter	lazy-lock.json	/^  "nvim-treesitter": { "branch": "master", "commit": "245da4eb2e52d14b034bbbedec9671e997ede764" /;"	o
nvim-treesitter-textobjects	lazy-lock.json	/^  "nvim-treesitter-textobjects": { "branch": "master", "commit": "3557e41418b4a6c5b85d5d64abe94c/;"	o
nvim-ts-autotag	lazy-lock.json	/^  "nvim-ts-autotag": { "branch": "main", "commit": "8ae54b90e36ef1fc5267214b30c2cbff71525fe4" },$/;"	o
nvim-web-devicons	lazy-lock.json	/^  "nvim-web-devicons": { "branch": "master", "commit": "b77921fdc44833c994fdb389d658ccbce5490c16/;"	o
plenary.nvim	lazy-lock.json	/^  "plenary.nvim": { "branch": "master", "commit": "a3e3bc82a3f95c5ed0d7201546d5d2c19b20d683" },$/;"	o
ppp	lua/elmon/plugins/devlife.vim	/^function! g:ppp( string )$/;"	f
printArray	lua/elmon/plugins/devlife.vim	/^function! g:printArray( array )$/;"	f
printHash	lua/elmon/plugins/devlife.vim	/^function! g:printHash( hashH, offsetDefault )$/;"	f
rnd	lua/elmon/plugins/devlife.vim	/^let rnd = localtime() % 0x10000$/;"	v
scroll	lua/elmon/plugins/devlife.vim	/^function! g:scroll()$/;"	f
setup	lua/elmon/plugins/wakatime.lua	/^        setup = function()$/;"	f
telescope.nvim	lazy-lock.json	/^  "telescope.nvim": { "branch": "0.1.x", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },$/;"	o
vim-be-good	lazy-lock.json	/^  "vim-be-good": { "branch": "master", "commit": "4fa57b7957715c91326fcead58c1fa898b9b3625" },$/;"	o
vim-fugitive	lazy-lock.json	/^  "vim-fugitive": { "branch": "master", "commit": "4f59455d2388e113bd510e85b310d15b9228ca0d" },$/;"	o
vim-wakatime	lazy-lock.json	/^  "vim-wakatime": { "branch": "master", "commit": "3cb40867cb5a3120f9bef76eff88edc7f1dc1a23" },$/;"	o
which-key.nvim	lazy-lock.json	/^  "which-key.nvim": { "branch": "main", "commit": "4433e5ec9a507e5097571ed55c02ea9658fb268a" }$/;"	o
